package com.symphony.bdk.workflow.engine.camunda;

import com.symphony.bdk.gen.api.model.V4SymphonyElementsAction;
import com.symphony.bdk.spring.events.RealTimeEvent;
import com.symphony.bdk.workflow.engine.WorkflowEngine;
import com.symphony.bdk.workflow.engine.camunda.bpmn.CamundaBpmnBuilder;
import com.symphony.bdk.workflow.engine.executor.EventHolder;
import com.symphony.bdk.workflow.lang.swadl.Workflow;
import com.symphony.bdk.workflow.util.DatafeedEventType;
import com.symphony.bdk.workflow.util.DatafeedEventUtil;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.camunda.bpm.engine.RepositoryService;
import org.camunda.bpm.engine.RuntimeService;
import org.camunda.bpm.engine.repository.Deployment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;

@Slf4j
@Component
public class CamundaEngine implements WorkflowEngine {

  // TODO make sure constants are defined once only
  private static final String MESSAGE_PREFIX = "message_";
  private static final String FORM_REPLY_PREFIX = "formReply_";

  @Autowired
  private RuntimeService runtimeService;

  @Autowired
  private RepositoryService repositoryService;

  @Autowired
  private CamundaBpmnBuilder bpmnBuilder;

  @Override
  public void execute(Workflow workflow) throws IOException {
    bpmnBuilder.addWorkflow(workflow);
    log.info("Deployed workflow {}", workflow.getName());
  }

  @Override
  public void stop(String workflowName) {
    for (Deployment deployment : repositoryService.createDeploymentQuery().deploymentName(workflowName).list()) {
      repositoryService.deleteDeployment(deployment.getId(), true);
      log.info("Removed workflow {}", deployment.getName());
    }
  }

  @Override
  public void stopAll() {
    for (Deployment deployment : repositoryService.createDeploymentQuery().list()) {
      repositoryService.deleteDeployment(deployment.getId(), true);
      log.info("Removed workflow {}", deployment.getName());
    }
  }

  @SneakyThrows
  @Override
  public <T> Optional<String> onEvent(RealTimeEvent<T> event) {
    if (event.getSource() instanceof V4SymphonyElementsAction) {
      // TODO remove this if

      // we expect the activity id to be the same as the form id to work
      // correlation across processes is based on the message id tha was created to send the form
      V4SymphonyElementsAction implEvent = (V4SymphonyElementsAction) event.getSource();
      Map<String, Object> formReplies = (Map<String, Object>) implEvent.getFormValues();
      String formId = implEvent.getFormId();

      runtimeService.createMessageCorrelation(FORM_REPLY_PREFIX + formId)
          .processInstanceVariableEquals(formId + ".outputs.msgId", implEvent.getFormMessageId())
          .setVariables(Collections.singletonMap(formId, formReplies))
          .correlate();
      return Optional.empty();

    } else {

      DatafeedEventType eventType = DatafeedEventUtil.getEventType(event.getSource());
      String messageName = DatafeedEventUtil.buildMessageNameFrom(event, eventType);
      log.info("Event {} generated by {}", event.getInitiator().getUser().getUserId(), eventType.getTypeName());

      Map<String, Object> processVariables = Collections.singletonMap(CamundaExecutor.EVENT,
          CamundaExecutor.OBJECT_MAPPER.writeValueAsString(new EventHolder<>(event.getInitiator(), event.getSource())));

      return Optional.of(
          runtimeService.startProcessInstanceByMessage(MESSAGE_PREFIX + messageName, processVariables).getId());
    }
  }
}
