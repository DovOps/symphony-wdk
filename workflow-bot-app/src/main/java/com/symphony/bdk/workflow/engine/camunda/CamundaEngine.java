package com.symphony.bdk.workflow.engine.camunda;

import com.symphony.bdk.gen.api.model.V4Initiator;
import com.symphony.bdk.gen.api.model.V4Message;
import com.symphony.bdk.gen.api.model.V4MessageSent;
import com.symphony.bdk.gen.api.model.V4SymphonyElementsAction;
import com.symphony.bdk.gen.api.model.V4User;
import com.symphony.bdk.spring.events.RealTimeEvent;
import com.symphony.bdk.workflow.engine.WorkflowEngine;
import com.symphony.bdk.workflow.engine.camunda.bpmn.CamundaBpmnBuilder;
import com.symphony.bdk.workflow.lang.swadl.Workflow;
import com.symphony.bdk.workflow.util.DatafeedEventType;
import com.symphony.bdk.workflow.util.DatafeedEventUtil;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.camunda.bpm.engine.RepositoryService;
import org.camunda.bpm.engine.RuntimeService;
import org.camunda.bpm.engine.repository.Deployment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Slf4j
@Component
public class CamundaEngine implements WorkflowEngine {

  private static final String STREAM_ID = "streamId";
  private static final String MESSAGE_PREFIX = "message_";
  private static final String FORM_REPLY_PREFIX = "formReply_";
  private static final String SYMPHONY_EVENT = "event";
  private static final String SYMPHONY_EVENT_TYPE = "eventTypeName";

  @Autowired
  private RuntimeService runtimeService;

  @Autowired
  private RepositoryService repositoryService;

  @Autowired
  private CamundaBpmnBuilder bpmnBuilder;

  @Override
  public void execute(Workflow workflow) throws IOException {
    bpmnBuilder.addWorkflow(workflow);
    log.info("Deployed workflow {}", workflow.getName());
  }

  @Override
  public void stop(String workflowName) {
    for (Deployment deployment : repositoryService.createDeploymentQuery().deploymentName(workflowName).list()) {
      repositoryService.deleteDeployment(deployment.getId(), true);
      log.info("Removed workflow {}", deployment.getName());
    }
  }

  @Override
  public void stopAll() {
    for (Deployment deployment : repositoryService.createDeploymentQuery().list()) {
      repositoryService.deleteDeployment(deployment.getId(), true);
      log.info("Removed workflow {}", deployment.getName());
    }
  }

  @Override
  public <T> Optional<String> onEvent(RealTimeEvent<T> event) {
    if (event.getSource() instanceof V4SymphonyElementsAction) {
      // TODO remove this if

      V4SymphonyElementsAction implEvent = (V4SymphonyElementsAction) event.getSource();
      Map<String, Object> formReplies = (Map<String, Object>) implEvent.getFormValues();
      String formId = implEvent.getFormId();

      runtimeService.createMessageCorrelation(FORM_REPLY_PREFIX + formId)
          .processInstanceVariableEquals(formId + ".outputs.msgId", implEvent.getFormMessageId())
          .setVariables(Collections.singletonMap(formId, formReplies))
          .correlate();
      return Optional.empty();

    } else {

      DatafeedEventType eventType = DatafeedEventUtil.getEventType(event.getSource());
      String messageName = DatafeedEventUtil.buildMessageNameFrom(event, eventType);
      log.info("Event {} generated by {}", event.getInitiator().getUser().getUserId(), eventType.getTypeName());

      Map<String, Object> processVariables = appendOrCreateMap(null, SYMPHONY_EVENT, serializeToJson(event));
      appendOrCreateMap(processVariables, SYMPHONY_EVENT_TYPE, event.getSource().getClass());
      appendOrCreateMap(processVariables, SYMPHONY_EVENT, serializeToJson(event));
      // TODO give access to initiator

      return Optional.of(
          runtimeService.startProcessInstanceByMessage(MESSAGE_PREFIX + messageName, processVariables).getId());
    }
  }

  @Override
  public Optional<String> messageReceived(String streamId, String content) {

    V4Initiator initiator = new V4Initiator();
    initiator.setUser(new V4User());

    V4MessageSent messageSent = new V4MessageSent();
    V4Message message = new V4Message();
    message.setMessage(content);
    messageSent.setMessage(message);
    return onEvent(new RealTimeEvent<>(initiator, messageSent));
  }

  @Override
  public void formReceived(String messageId, String formId, Map<String, Object> formReplies) {
    V4Initiator initiator = new V4Initiator();
    initiator.setUser(new V4User());

    V4SymphonyElementsAction elementsAction = new V4SymphonyElementsAction();
    elementsAction.setFormMessageId(messageId);
    elementsAction.setFormId(formId);
    elementsAction.setFormValues(formReplies);
    onEvent(new RealTimeEvent<>(initiator, elementsAction));
//
//    // we expect the activity id to be the same as the form id to work
//    // correlation across processes is based on the message id tha was created to send the form
//    runtimeService.createMessageCorrelation(FORM_REPLY_PREFIX + formId)
//        .processInstanceVariableEquals(formId + ".outputs.msgId", messageId)
//        .setVariables(Collections.singletonMap(formId, formReplies))
//        .correlate();
  }

  private String serializeToJson(RealTimeEvent<?> event) {
    ObjectMapper mapper = new ObjectMapper();
    String jsonSerialized = "";
    try {
      jsonSerialized = mapper.writeValueAsString(event.getSource());
    } catch (JsonProcessingException jpe) {
      log.error(jpe.getMessage());
    } finally {
      return jsonSerialized;
    }
  }

  private Map<String, Object> buildMapFor(String key, Object value) {
    return Collections.singletonMap(key, value);
  }

  private Map<String, Object> appendOrCreateMap(Map<String, Object> map, String key, Object value) {
    if (map == null) {
      map = new HashMap<>();
    }

    map.put(key, value);

    return map;
  }
}
