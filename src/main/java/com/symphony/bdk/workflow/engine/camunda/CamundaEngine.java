package com.symphony.bdk.workflow.engine.camunda;

import com.symphony.bdk.gen.api.model.V4ConnectionAccepted;
import com.symphony.bdk.gen.api.model.V4ConnectionRequested;
import com.symphony.bdk.gen.api.model.V4InstantMessageCreated;
import com.symphony.bdk.gen.api.model.V4MessageSent;
import com.symphony.bdk.gen.api.model.V4MessageSuppressed;
import com.symphony.bdk.gen.api.model.V4RoomCreated;
import com.symphony.bdk.gen.api.model.V4RoomDeactivated;
import com.symphony.bdk.gen.api.model.V4RoomMemberDemotedFromOwner;
import com.symphony.bdk.gen.api.model.V4RoomMemberPromotedToOwner;
import com.symphony.bdk.gen.api.model.V4RoomReactivated;
import com.symphony.bdk.gen.api.model.V4RoomUpdated;
import com.symphony.bdk.gen.api.model.V4SharedPost;
import com.symphony.bdk.gen.api.model.V4UserJoinedRoom;
import com.symphony.bdk.gen.api.model.V4UserLeftRoom;
import com.symphony.bdk.gen.api.model.V4UserRequestedToJoinRoom;
import com.symphony.bdk.spring.events.RealTimeEvent;
import com.symphony.bdk.workflow.engine.WorkflowEngine;
import com.symphony.bdk.workflow.engine.camunda.bpmn.CamundaBpmnBuilder;
import com.symphony.bdk.workflow.lang.swadl.Workflow;
import com.symphony.bdk.workflow.lang.validator.YamlValidator;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.symphony.bdk.workflow.util.DatafeedEventType;
import com.symphony.bdk.workflow.util.DatafeedEventUtil;

import org.camunda.bpm.engine.RepositoryService;
import org.camunda.bpm.engine.RuntimeService;
import org.camunda.bpm.engine.repository.Deployment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Component
public class CamundaEngine implements WorkflowEngine {

  private static final Logger LOGGER = LoggerFactory.getLogger(CamundaEngine.class);
  private static final String STREAM_ID = "streamId";
  private static final String MESSAGE_PREFIX = "message_";
  private static final String FORM_REPLY_PREFIX = "formReply_";
  private static final String SYMPHONY_EVENT = "event";
  private static final String SYMPHONY_EVENT_TYPE = "eventTypeName";

  @Autowired
  private RuntimeService runtimeService;

  @Autowired
  private RepositoryService repositoryService;

  @Autowired
  private CamundaBpmnBuilder bpmnBuilder;

  @Override
  public void execute(Workflow workflow) throws IOException {
    LOGGER.info("Executing workflow {}", workflow.getName());
    bpmnBuilder.addWorkflow(workflow);
  }

  @Override
  public void stopAll() {
    for (Deployment deployment : repositoryService.createDeploymentQuery().list()) {
      repositoryService.deleteDeployment(deployment.getId(), true);
    }
  }

  @Override
  public <T> void onEvent(RealTimeEvent<T> event) {
    DatafeedEventType eventType = DatafeedEventUtil.getEventType(event);
    String messageName = DatafeedEventUtil.buildMessageNameFrom(event, eventType);
    LOGGER.info("Event {} generated by {}", event.getInitiator().getUser().getUserId(), eventType.getTypeName());

    Map<String, Object> processVariables = appendOrCreateMap(null, SYMPHONY_EVENT, serializeToJson(event));
    appendOrCreateMap(processVariables, SYMPHONY_EVENT_TYPE, DatafeedEventUtil.getEventType(event).getTypeName());
    appendOrCreateMap(processVariables, SYMPHONY_EVENT, serializeToJson(event));

    runtimeService.startProcessInstanceByMessage(MESSAGE_PREFIX + messageName,
        processVariables);
  }

  @Override
  public void formReceived(String messageId, String formId, Map<String, Object> formReplies) {
    // we expect the activity id to be the same as the form id to work
    // correlation across processes is based on the message id tha was created to send the form
    runtimeService.createMessageCorrelation(FORM_REPLY_PREFIX + formId)
        .processInstanceVariableEquals(formId + ".msgId", messageId)
        .setVariables(Collections.singletonMap(formId, formReplies))
        .correlate();
  }

  @Override
  public void messageReceived(String streamId, String content) {
    if (!content.startsWith(YamlValidator.YAML_VALIDATION_COMMAND)) {
      // content being the command to start a workflow
      runtimeService.startProcessInstanceByMessage(MESSAGE_PREFIX + content,
          Collections.singletonMap(STREAM_ID, streamId));
    }
  }

  private String serializeToJson(Object event) {
    ObjectMapper mapper = new ObjectMapper();
    String jsonSerialized = "";
    try {
      jsonSerialized = mapper.writeValueAsString(event);
    } catch (JsonProcessingException jpe) {
      LOGGER.error(jpe.getMessage());
    } finally {
      return jsonSerialized;
    }
  }

  private Map<String, Object> buildMapFor (String key, Object value) {
    return Collections.singletonMap(key, value);
  }

  private Map<String, Object> appendOrCreateMap(Map<String, Object> map, String key, Object value){
    if(map == null) {
      map = new HashMap<>();
    }

    map.put(key, value);

    return map;
  }
}
